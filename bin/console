#!/bin/bash

# Usage: "bin/console build (debug|release)"
# Description: Compiles "main.c" in "/target/(debug|release)/main"
build() {
    local TARGET="$1"
    if [[ "$TARGET" = "debug" || "$TARGET" = "release" ]]; then
        mkdir -p "./target/$TARGET"
        if [[ "$TARGET" = "release" ]]; then
            UNIQUE_ID=$(date +%s)
            OUTPUT_FILE="./target/$TARGET/$UNIQUE_ID-main"
        else
            OUTPUT_FILE="./target/$TARGET/main"
        fi
        gcc -o "$OUTPUT_FILE" "./src/main.c"
        echo "Build ($TARGET) finished executing."
    else
        echo "Error."
        echo "Invalid or missing build target."
        exit 1
    fi
}

# Usage: "bin/console run"
# Description: Compiles and run the "main" executable from "/target/debug/main"
run() {
    build debug
    if [ ! -f "./target/debug/main" ]; then
        echo "Error."
        echo "Binary not found."
        exit 1
    fi
    ./target/debug/main
}

# Usage: "bin/console check-requirements"
# Description: Executes the system requirements check
requirements_check() {
    if ! command -v gcc &> /dev/null; then
        echo -e " - GCC \xE2\x9C\x97"
    else
        echo -e " - GCC \xE2\x9C\x93"
    fi
    echo "Requirements check finished executing."
}

if [ "$1" = "build" ]; then
    build "$2"
    exit 0
elif [ "$1" = "run" ]; then
    run
    exit 0
elif [ "$1" = "check-requirements" ]; then
    requirements_check
    exit 0
fi

echo "Error."
echo "Command not found."
exit 1
